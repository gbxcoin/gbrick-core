
// name            : gbrick::gbric gRpc proto
// description     : Gbrick Blockchain
// author          : Seung-man Jang
// date_created    : 20180105
// date_modified   : 20180727
// version         : 0.1
// python_version  : 3.6.5
// Comments        :


syntax = "proto2";

// Peer Inner Service
service InnerService {
    rpc Request (Message) returns (Message) {}
    rpc GetStatus (StatusRequest) returns (StatusReply) {}
    rpc GetGlogicStatus (StatusRequest) returns (StatusReply) {}
    rpc Stop (StopRequest) returns (StopReply) {}
    rpc Echo (CommonRequest) returns (CommonReply) {}
    rpc GetBlock (GetBlockRequest) returns (GetBlockReply) {}
    rpc Query (QueryRequest) returns (QueryReply) {}
    rpc Subscribe (PeerRequest) returns (CommonReply) {}
    rpc UnSubscribe (PeerRequest) returns (CommonReply) {}
    rpc NotifyLeaderBroken (CommonRequest) returns (CommonReply) {}
    rpc NotifyProcessError (CommonRequest) returns (CommonReply) {}
}

// Peer Outer Service for Outer Client or other Peer
service PeerService {
    rpc Request (Message) returns (Message) {}
    rpc GetStatus (StatusRequest) returns (StatusReply) {}
    rpc GetGlogicStatus (StatusRequest) returns (StatusReply) {}
    rpc Stop (StopRequest) returns (StopReply) {}
    rpc CreateTx (CreateTxRequest) returns (CreateTxReply) {}
    rpc GetTx (GetTxRequest) returns (GetTxReply) {}
    rpc GetBlock (GetBlockRequest) returns (GetBlockReply) {}
    rpc Query (QueryRequest) returns (QueryReply) {}
    rpc GetInvokeResult (GetInvokeResultRequest) returns (GetInvokeResultReply) {}
    rpc BlockSync (BlockSyncRequest) returns (BlockSyncReply) {}
    rpc AnnounceUnconfirmedBlock (BlockSend) returns (CommonReply) {}
    rpc AnnounceConfirmedBlock (BlockAnnounce) returns (CommonReply) {}
    rpc AnnounceNewPeer (PeerRequest) returns (CommonReply) {}
    rpc AnnounceDeletePeer (PeerID) returns (CommonReply) {}
    rpc Echo (CommonRequest) returns (CommonReply) {}
    rpc ComplainLeader (ComplainLeaderRequest) returns (CommonReply) {}
    rpc AnnounceNewLeader (ComplainLeaderRequest) returns (CommonReply) {}
    rpc GetLastBlockHash (CommonRequest) returns (BlockReply) {}
    rpc Subscribe (PeerRequest) returns (CommonReply) {}
    rpc UnSubscribe (PeerRequest) returns (CommonReply) {}
    rpc AddTx (TxSend) returns (CommonReply) {}
    rpc VoteUnconfirmedBlock (BlockVote) returns (CommonReply) {}

}


// GNController Outer Service
service GNController {
    rpc Request (Message) returns (Message) {}
    rpc GetStatus (StatusRequest) returns (StatusReply) {}
    rpc Stop (StopRequest) returns (StopReply) {}
    rpc GetChannelInfos (GetChannelInfosRequest) returns (GetChannelInfosReply) {}
    rpc ConnectPeer (ConnectPeerRequest) returns (ConnectPeerReply) {}
    rpc GetPeerList (CommonRequest) returns (PeerList) {}
    rpc GetPeerStatus (PeerID) returns (StatusReply) {}
    rpc AnnounceNewLeader (ComplainLeaderRequest) returns (CommonReply) {}
    rpc GetRandomTable (CommonRequest) returns (CommonReply) {}
    rpc Subscribe (PeerRequest) returns (CommonReply) {}
    rpc UnSubscribe (PeerRequest) returns (CommonReply) {}
}

// GNC Inner Service for Admin
service AdminService {
    rpc Request (Message) returns (Message) {}
}


// ########################################################################
// Container Service
// ########################################################################

service Container {
    rpc Request (Message) returns (Message) {}
}


message Message {
    required int32 code = 1;        // numeric value for request type and response result, see define_code.py
    optional string channel = 2;    // channel ID for multichain network
    optional string message = 3;    // expain about code (optional)
    optional string meta = 4;       // json data for object or itself (optional)
    optional bytes object = 5;      // dumped python object by pickle for response (optional)
}

// Interface messages for selecting Leader

// If use this message for response to AnnounceComplained,
// if do not agree to Complain about complained_leader_id, resend complained_leader_id to new_leader_id
// TODO :: In addition,  it should be supplemented with a signature on the agreement
message ComplainLeaderRequest {
    required string complained_leader_id = 1;
    optional string channel = 2;
    required string new_leader_id = 3;
    required string message = 4;
}

//GNC - Peer list
message PeerList {
    required bytes peer_list = 1;
}


//[Peer&BlockGenerator] for Create and Send Transaction
message CreateTxRequest {
    required string data = 1;
    optional string channel = 2; // channel ID for multichain network
}

message CreateTxReply {
    required int32 response_code = 1;
    required string tx_hash = 2;
    required string more_info = 3;
}

message TxSend {
    required bytes tx = 1;
    optional string channel = 2; // channel ID for multichain network
}


// GetBlock Request and Reply
message GetBlockRequest {
    optional string block_hash = 1;
    optional string channel = 2;            // channel ID for multichain network
    optional int32 block_height = 3 [default = -1];
    required string block_data_filter = 4;  // "version, prev_block_hash, time_stamp, ..." fields of Block"
    required string tx_data_filter = 5;     // "tx_hash, data_string, ..." fields of Transaction
}

message GetBlockReply {
    required int32 response_code = 1;
    required string block_hash = 2;
    // json key:value by block_data_filter "{version:'0.1', prev_block_hash:'0000', time_stamp:'1990-10-10'}"
    required string block_data_json = 3;
    // json key:value by tx_data_filter "{transaction_hash:'12345', data:'12345', time_stamp:'1990-10-10'}"
    repeated string tx_data_json = 4;
}


// Query Request and Reply
message QueryRequest {
    required string params = 1;     // json params
    optional string channel = 2;    // channel ID for multichain network
}

message QueryReply {
    required int32 response_code = 1;
    required string response = 2; // json response for query
}


// GetTx Request and Reply
message GetTxRequest {
    required string tx_hash = 1;
    optional string channel = 2; // channel ID for multichain network
}

message GetTxReply {
    // Find Tx 의 data 는 CreateTxRequest 의 data 와 같다.
    required int32 response_code = 1;
    required string meta = 2;
    required string data = 3;
    required string more_info = 4;
    required bytes signature = 5;
    required bytes public_key = 6;
}

// GetTxResult Request and Reply
message GetInvokeResultRequest {
    required string tx_hash = 1;
    optional string channel = 2; // channel ID for multichain network
}

message GetInvokeResultReply {
    required int32 response_code = 1;
    // Transaction invoke result
    optional string result = 2;
}


// For Block Sync
message BlockSyncRequest {
    required string block_hash = 1;
    optional string channel = 2; // channel ID for multichain network
}

message BlockSyncReply {
    required int32 response_code = 1;
    required int32 block_height = 2;
    required int32 max_block_height = 3;
    required bytes block = 4;
}


message BlockSend {
    required bytes block = 1;
    optional string channel = 2; // channel ID for multichain network
}

message BlockReply {
    required int32 response_code = 1;
    required string message = 2;
    required string block_hash = 3;
}

message BlockVote {
    required int32 vote_code = 1;  // has same values of response_code
    optional string channel = 2; // channel ID for multichain network
    required string message = 3;
    required string block_hash = 4;
    required string peer_id = 5;
    required string group_id = 6;
}


//[Peer&BlockGenerator] for announce confirmed Block
message BlockAnnounce {
    required string block_hash = 1;
    optional string channel = 2; // channel ID for multichain network
    optional bytes block = 3;
}


// Common

enum PeerType {
    PEER = 0;
    BLOCK_GENERATOR = 1;
    GN_CONTROLLER = 2;
}


// for Common Mesage
message CommonRequest {
    required string request = 1;
    optional string channel = 2; // channel ID for multichain network
    optional string group_id = 3;
}

message CommonReply {
    required int32 response_code = 1;
    required string message = 2;
}


// Data for GNC
message StatusRequest {
    required string request = 1;
    optional string channel = 2;
}

message StatusReply {
    required string status = 1;
    required int32 block_height = 2;
    required int32 total_tx = 3;
    optional int32 is_leader_complaining = 4;
}


// for Stop request
message StopRequest {
    required string reason = 1;
}

message StopReply {
    required string status = 1;
}


//GNC
// * target = "[IP]:[port]", It's gRPC way
message PeerRequest {
    required string peer_id = 1;
    optional string channel = 2;
    required string peer_target = 3;
    required string group_id = 4;
    required PeerType peer_type = 5;
    optional bytes cert = 6;
    optional int32 peer_order = 7;
    optional bytes peer_object = 8;
}

message ConnectPeerRequest {
    required string peer_id = 1;
    optional string channel = 2;
    required string peer_target = 3;
    required string group_id = 4;
    optional bytes cert = 5;
    optional int32 peer_order = 6;
    optional bytes peer_object = 7;
}

message ConnectPeerReply {
    required int32 status = 1;
    required bytes peer_list = 2;
    repeated string channels = 3;
    optional string more_info = 4;
}

message GetChannelInfosRequest {
    required string peer_id = 1;
    required string peer_target = 2;
    required string group_id = 3;
    optional bytes cert = 4;
}

message GetChannelInfosReply {
    required int32 response_code = 1;
    required string channel_infos = 2;
}

message PeerID {
    required string peer_id = 1;
    optional string channel = 2;
    required string group_id = 3;
}
