'''
name            : gbrick::define.py
description     : Gbrick Blockchain
author          : Steve Han
date_created    : 20180211
date_modified   : 20180423
version         : 0.1
python_version  : 3.6.5
Comments        :
'''

from enum import Enum
import os
import sys
import logging
from enum import IntEnum


# GENESIS AND DEFAULT
GENESIS_PREVHASH=""
GENESIS_TIMESTAMP=0
GENESIS_EXTRA_DATA=b''

MERKLE_TREE_ROOTHASH=b'\x00' * 32

GBRICK_ROOT_PATH = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
PATH_PROTO_BUFFERS = "gbrick/protos"
PATH_PROTO_BUFFERS_TEST = "../../gbrick/protos"

if os.path.exists(PATH_PROTO_BUFFERS):
    sys.path.append(PATH_PROTO_BUFFERS)
else:
    sys.path.append(PATH_PROTO_BUFFERS_TEST)


# LOG DEFINE
GBRICK_LOG_LEVEL = os.getenv('GBRICK_LOG_LEVEL', 'DEBUG')
LOG_LEVEL = logging.getLevelName(GBRICK_LOG_LEVEL)
LOG_FILE_PATH = "/var/tmp/gbrick_service.log"
LOG_FORMAT = "'%(asctime)s %(levelname)s %(message)s'"
LOG_FORMAT_DEBUG = "%(asctime)s %(process)d %(levelname)s %(message)s"

MONITOR_LOG = False
MONITOR_LOG_HOST = 'localhost'
MONITOR_LOG_PORT = 20001
MONITOR_LOG_MODULE = 'fluent'


# PROFILING
ENABLE_PROFILING = False


# BLOCKCHAIN
BC_UNCONFIRM_BLOCK_KEY = b'UNCONFIRM_BLOCK'
BC_LAST_BLOCK_KEY = b'LAST_BLOCK_KEY'
BC_BLOCK_HEIGHT_KEY = b'BLOCK_HEIGHT_KEY'


# TRANSACTION
TS_PEER_ID_KEY = 'peer_id'
TS_GLOGIC_ID_KEY = 'glogic_id'
TS_GLOGIC_VERSION_KEY = 'glogic_version'
TS_CHANNEL_KEY = 'channel_name'

# GRPC
IP_LOCAL = '127.0.0.1'
IP_BLOCKGENERATOR = IP_LOCAL
IP_PEER = IP_LOCAL
IP_GNC = IP_LOCAL
IP_GNC_SUB = IP_LOCAL
INNER_SERVER_BIND_IP = '127.0.0.1'
DOCKER_HOST = os.getenv('DOCKER_HOST')
GBRICK_HOST = os.getenv('GBRICK_HOST', DOCKER_HOST)

PORT_PEER = 7100
PORT_INNER_SERVICE = 0
PORT_DIFF_INNER_SERVICE = 10000
PORT_BLOCKGENERATOR = 7101
PORT_GNC = 7102
PORT_GNC_SUB = 7102
PORT_GLOGIC_CONTAINER = 7103
PORT_DIFF_GLOGIC_CONTAINER = 20021
PORT_DIFF_BETWEEN_GLOGIC_CONTAINER = 30
PORT_DIFF_TX_CONTAINER = 10051
PORT_DIFF_BROADCAST_CONTAINER = 10081
MAX_WORKERS = 100
SLEEP_SECONDS_IN_SERVICE_LOOP = 0.1
SLEEP_SECONDS_IN_SERVICE_NONE = 2
GRPC_TIMEOUT = 30
GRPC_TIMEOUT_TEST = 30
GRPC_CONNECTION_TIMEOUT = GRPC_TIMEOUT * 2
STUB_REUSE_TIMEOUT = 60


# BROADCAST
BC_PROCESS_INFO_KEY = "process_info"
BC_PROCESS_VARIABLE_STUB_TO_SELF_PEER = "stub_to_self_peer"
BC_PROCESS_VARIABLE_PEER_STATUS = "peer_status"

BC_SELF_PEER_TARGET_KEY = "self_peer_target"
BC_LEADER_PEER_TARGET_KEY = "leader_peer_target"
BC_SUBSCRIBE_COMMAND = "subscribe"
BC_UNSUBSCRIBE_COMMAND = "unsubscribe"
BC_UPDATE_AUDIENCE_COMMAND = "update_audience"
BC_BROADCAST_COMMAND = "broadcast"
BC_MAKE_SELF_PEER_CONNECTION_COMMAND = "make_self_connection"
BC_CONNECT_TO_LEADER_COMMAND = "connect_to_leader"
BC_CREATE_TX_COMMAND = "create_tx"
BC_STATUS_COMMAND = "status"


# TEST
TEST_FAIL_VOTE_SIGN = "test_fail_vote_sign"


# BLOCK MANAGER
class ConsensusAlgorithm(IntEnum):
    sieve = 0
    llfc = 1


INTERVAL_BLOCKGENERATION = 1
INTERVAL_WAIT_PEER_VOTE = 0.1
MAX_RETRY_CREATE_DB = 10
DEFAULT_LEVEL_DB_PATH = "./db"
LEVEL_DB_KEY_FOR_PEER_ID = str.encode("peer_id_key")
PEER_DATA_ENCODING = 'UTF-8'
HASH_KEY_ENCODING = 'UTF-8'
CONSENSUS_ALGORITHM = ConsensusAlgorithm.sieve

MAX_BLOCK_KBYTES = 3000
MAX_BLOCK_TX_NUM = 10000

VOTING_RATIO = 0.51 #0.65
BLOCK_HEIGHT_BYTES_LEN = 12
LEADER_BLOCK_CREATION_LIMIT = 20000000
BLOCK_VOTE_TIMEOUT = 60 * 10
DEFAULT_STORAGE_PATH = os.getenv('DEFAULT_STORAGE_PATH', os.path.join(GBRICK_ROOT_PATH, '.storage'))


# GLOGIC
DEFAULT_GLOGIC_HOST = os.getenv('DEFAULT_GLOGIC_HOST', 'smcore.co.kr')
DEFAULT_GLOGIC_BASE = os.getenv('DEFAULT_GLOGIC_BASE', 'git@'+DEFAULT_GLOGIC_HOST)
DEFAULT_GLOGIC_REPOSITORY_PATH = os.path.join(GBRICK_ROOT_PATH, 'glogic')
DEFAULT_GLOGIC_STORAGE_PATH = os.getenv('DEFAULT_GLOGIC_STORAGE_PATH', os.path.join(DEFAULT_STORAGE_PATH, 'glogic'))
DEFAULT_GLOGIC_PACKAGE = 'gbrick/default'
DEFAULT_GLOGIC_BRANCH_MASTER = 'master'
DEFAULT_GLOGIC_BRANCH = os.getenv('DEFAULT_GLOGIC_BRANCH', DEFAULT_GLOGIC_BRANCH_MASTER)

DEFAULT_GLOGIC_BASE_USER = 'glogic'
DEFAULT_GLOGIC_BASE_PASSWORD = 'glogic'

ALLOW_LOAD_GLOGIC_IN_DEVELOP = os.getenv('ALLOW_LOAD_GLOGIC_IN_DEVELOP', 'allow') == 'allow'
DEVELOP_GLOGIC_PACKAGE_ROOT = 'develop'

DEFAULT_GLOGIC_REPOSITORY_KEY = os.path.join(GBRICK_ROOT_PATH, 'resources/gbrick_deploy')
DEFAULT_GLOGIC_REPOSITORY_KEY = os.getenv('DEFAULT_GLOGIC_REPOSITORY_KEY', DEFAULT_GLOGIC_REPOSITORY_KEY)

GLOGIC_LOAD_TIMEOUT = GRPC_TIMEOUT * 180
GLOGIC_RETRY_TIMES = 3
GLOGIC_QUERY_TIMEOUT = 120
GLOGIC_INVOKE_TIMEOUT = 60 * 5
GLOGIC_LOAD_RETRY_TIMES = 3
GLOGIC_LOAD_RETRY_INTERVAL = 25.0
GLOGIC_INTERVAL_LOAD = 1
GLOGIC_REMOTE_PULL = False


# REST SERVICE
PORT_DIFF_REST_SERVICE_CONTAINER = 1900  # peer service 가 REST container 를 시작할 때 자신과 다른 포트를 사용하도록 차이를 설정한다.
ENABLE_REST_SERVICE = True
REST_ADDITIONAL_TIMEOUT = 30  # seconds
REST_GRPC_TIMEOUT = GRPC_TIMEOUT + REST_ADDITIONAL_TIMEOUT
REST_GLOGIC_QUERY_TIMEOUT = GLOGIC_QUERY_TIMEOUT + REST_ADDITIONAL_TIMEOUT

# check default stroage path exist
if not os.path.exists(DEFAULT_STORAGE_PATH):
    os.makedirs(DEFAULT_STORAGE_PATH)


# Peer
CONNECTION_RETRY_INTERVAL = 2
CONNECTION_RETRY_INTERVAL_TEST = 2
CONNECTION_RETRY_TIMEOUT_WHEN_INITIAL = 5
CONNECTION_RETRY_TIMEOUT = 60
CONNECTION_RETRY_TIMEOUT_TO_RS = 60 * 5
CONNECTION_RETRY_TIMEOUT_TO_RS_TEST = 30
CONNECTION_RETRY_TIMES = 2
CONNECTION_RETRY_TIMES_TO_RS = 5
CONNECTION_TIMEOUT_TO_RS = 60 * 2

REQUEST_BLOCK_GENERATOR_TIMEOUT = 10
BLOCK_GENERATOR_BROADCAST_TIMEOUT = 5
WAIT_GRPC_SERVICE_START = 5  # seconds
WAIT_SECONDS_FOR_SUB_PROCESS_START = 5
SLEEP_SECONDS_FOR_SUB_PROCESS_START = 1
WAIT_SUB_PROCESS_RETRY_TIMES = 5
PEER_GROUP_ID = ""


# GNController
GBRICK_DEFAULT_CHANNEL = "GBX"
GBRICK_TEST_CHANNEL = "GBX_TEST"

ALL_GROUP_ID = "all_group_id"
TEST_GROUP_ID = "test_group_id"
LEVEL_DB_KEY_FOR_PEER_LIST = "peer_manager_key"

ENABLE_GNC_HEARTBEAT = True
IS_LOAD_PEER_MANAGER_FROM_DB = False

SLEEP_SECONDS_IN_GNC_HEARTBEAT = 30
NO_RESPONSE_COUNT_ALLOW_BY_HEARTBEAT = 5

CHANNEL_MANAGE_DATA_PATH = os.path.join(GBRICK_ROOT_PATH, 'resources/gbx_default_data.json')
ENABLE_CHANNEL_AUTH = False



# Signature
IS_KEY_FILE_LOAD = True
PRIVATE_PATH = os.path.join(GBRICK_ROOT_PATH, 'resources/default_pki/private.der')
PUBLIC_PATH = os.path.join(GBRICK_ROOT_PATH, 'resources/default_pki/public.der')
DEFAULT_PW = b'test'
ENABLE_KMS = False
RANDOM_TABLE_SIZE = 128
RANDOM_SIZE = 128
FIRST_SEED = 50
SECOND_SEED = 25
MY_SEED = 123456
